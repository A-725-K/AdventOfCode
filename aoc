#!/usr/bin/perl

use v5.40;
use strict;
use warnings;
use File::Copy;
use Getopt::Long qw(GetOptions);

my $usage = "Usage: $0 [--day DD] [--year YYYY] --cookie <SESSION_COOKIE> --start [lang] | --submit 1|2 <ANS>";

# Handle program arguments
my ($lang, $session_cookie, @answer, $year, $day);
GetOptions(
  "start:s" => \$lang,
  "cookie=s" => \$session_cookie,
  "submit=s{2}" => \@answer,
  "year=s" => \$year,
  "day=s" => \$day,
) or die $usage;
open my $fh, '<', '.cookie';
{
  local $/;
  $session_cookie ||= $ENV{AOC} || <$fh>;
  $session_cookie =~ s#\n##sg;
}
$lang ||= 'go';
if (!$session_cookie) {
  say "This script needs a session cookie to continue!";
  die $usage;
}

# Make sure day and year are set
my $date = `date --rfc-3339=date`;
my $can_adjust = $year || $day;
($year, $day) = $date =~ m/(\d+)-\d+-(\d+)/ if !$year || !$day;

# There are 2 possible situations:
#   - len(answer) == 0: generating the placeholder for the day + getting input
#   - len(answer) > 0: trying to submit a solution
if (scalar @answer == 0) {
  my $dir = "$year/day$day";
  if (-d "$dir") {
    say "Cannot create today's directory ($dir): already created...";
    exit -1;
  }
  if (! -d "$year/") {
    say "Welcome to AoC $year!";
    mkdir $year, 0755;
  }

  # XXX: when adding here support for additional languages, create also a
  #      a template with the correct extension in the "templates" directory
  my ($ext, $skip_dir, $dest);
  if ($lang eq 'go') {
    say "Using Golang!";
    $ext = ".go";
  } elsif ($lang eq 'py') {
    say "Using Python3!";
    $ext = ".py";
  } elsif ($lang eq 'rust') {
    say "Using Rust!";
    $ext = ".rs";
    `cargo init $year/day$day`;
    $dest = "$dir/src/main.rs";
    $skip_dir = 1;
  }

  if (!$skip_dir) {
    say "Creating directory $dir...";
    mkdir $dir, 0755;
  }

  say "Creating files...";
  `touch $dir/mini_input`;
  $dest //= "$dir/day$day$ext";
  copy("templates/dayX$ext", $dest) if $dest;

  # Calling the AoC API to fetch the input
  $day =~ s/0// if $day < 10;
  say "Fetching input...";
  `curl -s -H 'Cookie: session=$session_cookie' -o $dir/input https://adventofcode.com/$year/day/$day/input`
} else {
  my ($level, $value) = @answer;
  die $usage if $level < 1 || $level > 2;

  # Calling the AoC API to submit the answer
  $day =~ s/0// if $day < 10;
  my (undef, undef, $hour) = localtime;
  if ($can_adjust && $hour >= 0 && $hour < 6) {
    say "Adjusting 'day' to yesterday, night owl...";
    $day--;
  }
  say "Sending answer for part $level: $value";
  say "Calling: https://adventofcode.com/$year/day/$day/answer";
  my $cmd = "curl -s -H 'Cookie: session=$session_cookie' -H 'Content-Type: application/x-www-form-urlencoded' -d 'level=$level&answer=$value' -X POST 'https://adventofcode.com/$year/day/$day/answer'";
  say "Cmd: $cmd";
  chomp(my $resp = `$cmd`);
  
  # Poor man parsing solution for HTML response containing the outcome of the
  # submission
  my ($main_tag) = $resp =~ m#<article>(.*)</article>#s;
  $main_tag =~ s#\n##sg;
  $main_tag =~ s#<a h.*</a>##g;
  say "$main_tag";
}
